# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1emwXbcRh2aBvoMYKao3OOLL4MCxTCd8q

# ***Load libraries***
"""

import pandas as pd
import numpy as np
import math

"""# ***Load data***"""

hoteldf=pd.read_csv("first inten project.csv")
hoteldf.head(35)

"""# ***Check data types:***"""

hoteldf.info()

"""# ***Nulls checking***"""

print (hoteldf.isnull().sum())
#none of the dataset has nulls

"""# ***Correct the data***"""

#if No of adults=0 & No of children>0 and it is not cancelled
for i in range (len(hoteldf) - 1, -1, -1):
  if (hoteldf.loc[i,'number of adults']==0
      and hoteldf.loc[i,'number of children']>0
      and hoteldf.loc[i,'booking status']!='Canceled'):
    hoteldf = hoteldf.drop(index=i)
    print(i)
# Reset the index after dropping rows to make sure numbering is consecutive
hoteldf = hoteldf.reset_index(drop=True)

#if No of week night=0 & No of weekend night =0 and it is not cancelled
for i in range (len(hoteldf) - 1, -1, -1):
  if (hoteldf.loc[i,'number of weekend nights']==0
      and hoteldf.loc[i,'number of week nights']==0
      and hoteldf.loc[i,'booking status']!='Canceled'):
    print(i,hoteldf.loc[i,'number of weekend nights'],hoteldf.loc[i,'number of week nights'],hoteldf.loc[i,'booking status'])
    hoteldf = hoteldf.drop(index=i)
# Reset the index after dropping rows to make sure numbering is consecutive
hoteldf = hoteldf.reset_index(drop=True)

"""# ***Check for white spaces and remove them***"""

for column in hoteldf.columns:
    hoteldf[column] = hoteldf[column].apply(lambda x: x.strip() if isinstance(x, str) else x)

"""# ***Check for outliers***"""

#IQR for average price
Q1 = hoteldf['average price '].quantile(0.25)
Q3 = hoteldf['average price '].quantile(0.75)
IQR = Q3 - Q1

outliers = (hoteldf['average price '] < Q1-1.5*IQR) | (hoteldf['average price '] > Q3+ 1.5*IQR)
print(hoteldf[(hoteldf['average price '] < Q1-1.5*IQR) | (hoteldf['average price '] > Q3+ 1.5*IQR)])
hoteldf=hoteldf[~outliers]
hoteldf = hoteldf.reset_index(drop=True)

#IQR for Lead time
Q1 = hoteldf['lead time'].quantile(0.25)
Q3 = hoteldf['lead time'].quantile(0.75)
IQR = Q3 - Q1

outlierss = (hoteldf['lead time'] < Q1-1.5*IQR) | (hoteldf['lead time'] > Q3+ 1.5*IQR)
print(hoteldf[outlierss])
hoteldf=hoteldf[~outlierss]
hoteldf = hoteldf.reset_index(drop=True)

"""# ***Transformation For The Categorical Data***


"""

hoteldf['booking status'] = hoteldf['booking status'].replace({'Canceled':0, 'Not_Canceled':1})
hoteldf['market segment type']= hoteldf['market segment type'].replace({'Offline':0, 'Online':1 , 'Corporate':2 ,
                                                                        'Aviation':3 , 'Complementary':4 })
hoteldf['room type']= hoteldf['room type'].replace({'Room_Type 1':0, 'Room_Type 2':1 , 'Room_Type 3':2 , 'Room_Type 4':3
                                                    , 'Room_Type 5':4 ,'Room_Type 6':5,'Room_Type 7':6 })

hoteldf.head()

correlation = hoteldf['average price '].corr(hoteldf['booking status'])
print(correlation)
correlation = hoteldf['lead time'].corr(hoteldf['booking status'])
print(correlation)
correlation = hoteldf['market segment type'].corr(hoteldf['booking status'])
print(correlation)
correlation = hoteldf['room type'].corr(hoteldf['booking status'])
print(correlation)
correlation = hoteldf['P-C'].corr(hoteldf['booking status'])
print(correlation)
correlation = hoteldf['P-not-C'].corr(hoteldf['booking status'])
print(correlation)
correlation = hoteldf['special requests'].corr(hoteldf['booking status'])
print(correlation)

"""# ***Feature extraction***"""

feature_ext = hoteldf[['lead time','average price ', 'booking status']]
feature_ext.head(10)

"""# ***Train-Test split***"""

from sklearn.model_selection import train_test_split
(Xtrain, Xtest, Ytrain, Ytest) = train_test_split(feature_ext[['lead time']].values, feature_ext['booking status'].values, test_size=.2, random_state=500)
print (Xtrain,Ytrain)

"""# ***KNN***"""

def KNN(X_train, Y_train, X_test, K):
    Y_pred = []
    for i in range(len(X_test)):
        distance = []
        for j in range(len(X_train)):
            dist = dist = np.sqrt(np.sum((X_test[i] - X_train[j]) ** 2))
            distance.append((dist, Y_train[j]))
        distance.sort()
        neighbors = distance[:K]
        classes = {}
        for n in neighbors:
            if n[1] in classes:
                classes[n[1]] += 1
            else:
                classes[n[1]] = 1
        Y_pred.append(max(classes, key=classes.get))
    return Y_pred

k=1
Ypred=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred)
print(acc)

k=100
Ypred=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred)
print(acc)

k=1000
Ypred=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred)
print(acc)

k=5000
Ypred=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred)
print(acc)

k=10000
Ypred=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred)
print(acc)

k=15000
Ypred=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred)
print(acc)

X_test_case = np.array([100,10,200])
Ypred=KNN(Xtrain,Ytrain,X_test_case,1000)
print(Ypred)
#0 for cancellation
#1 for not cancelled

from sklearn.model_selection import train_test_split
(Xtrain, Xtest, Ytrain, Ytest) = train_test_split(feature_ext[['lead time','average price ']].values, feature_ext['booking status'].values, test_size=.2, random_state=500)
print (Xtrain,Ytrain)

k=1000
Ypred2=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred2)
print(acc)

k=5000
Ypred2=KNN(Xtrain,Ytrain,Xtest,k)
from sklearn.metrics import accuracy_score
acc=accuracy_score(Ytest,Ypred2)
print(acc)

